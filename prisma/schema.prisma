datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  image         String?
  password      String?
  emailVerified DateTime?
  accounts      Account[]
  role          Role       @default(CUSTOMER)
  orders        Order[]
  reviews       Review[]
  blogsPost     BlogPost[]
  comments      Comment[]
  address       Address?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model resetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  expires   Int
  createdAt DateTime @default(now())
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  street     String
  city       String
  state      String?
  postalCode String?
  country    String
  phone      String?

  shippingOrders Order[] @relation("shipping")
  billingOrders  Order[] @relation("billing")
  userId         String  @unique @db.ObjectId
  user           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  specifications String[]
  categoryId     String           @db.ObjectId
  category       Category         @relation(fields: [categoryId], references: [id])
  variants       ProductVariant[]
  reviews        Review[]
  images         Image[]
  orderItems     OrderItem[]
  price          Int
  discount       Int?
  totalSales     Int              @default(0)
  isFeatured     Boolean
  isArchived     Boolean
  stock          Int?
  brandName      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  productId  String      @db.ObjectId
  sizeId     String?     @db.ObjectId
  size       Size?       @relation(fields: [sizeId], references: [id])
  colorId    String?     @db.ObjectId
  color      Color?      @relation(fields: [colorId], references: [id])
  price      Int?
  stock      Int
  image      String?
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  products    Product[]
  blogPost    BlogPost?
  blogId      String?   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  value            String
  productsVariants ProductVariant[]
  updatedAt        DateTime         @updatedAt
  createdAt        DateTime         @default(now())
}

model Color {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  value            String
  productsVariants ProductVariant[]
  updatedAt        DateTime         @updatedAt
  createdAt        DateTime         @default(now())
}

// Order Models

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

model Order {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String      @db.ObjectId
  orderItems        OrderItem[]
  totalAmount       Int
  paymentMethod     String?
  isPaid            Boolean
  status            OrderStatus @default(Pending)
  shippingAddress   Address     @relation("shipping", fields: [shippingAddressId], references: [id])
  billingAddress    Address     @relation("billing", fields: [billingAddressId], references: [id])
  shippingAddressId String      @db.ObjectId
  billingAddressId  String      @db.ObjectId
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String         @db.ObjectId
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String         @db.ObjectId
  product          Product?        @relation(fields: [productId], references: [id])
  productId        String @db.ObjectId
  quantity         Int
  price            Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Reviews
model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  rating    Int
  comment   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Blogs and Billboards
model BlogPost {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  excerpt        String   
  content        String
  authorId       String    @db.ObjectId
  author         User      @relation(fields: [authorId], references: [id])
  categoryId     String    @unique @db.ObjectId
  category       Category  @relation(fields: [categoryId], references: [id])
  tags           String[] // Array of tag strings
  thumbnailImage String?
  comments       Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl    String
  link        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId   String   @db.ObjectId
  blogPost BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  content  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeneralSettings {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  logoImage    String
  faviconImage String
  phone String
}

model EmailSettings {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  officialEmail String
  senderName    String?
  yourEmail      String?
}


enum Currency {
  USD 
  EUR
  JPY
  BDT
  CAD
}

model BillingSettings {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  currency Currency @default(USD)
  taxRate  Float  @default(0.0)
}

model IntegrationSettings {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  googleAnalyticsId String?
  facebookPixelId   String?
}

// Shipping Methods
model ShippingMethod {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String // e.g., "Standard Shipping", "Express Shipping"
  description        String?
  price              Int // Store in cents or the smallest unit of your currency
  isFree             Boolean @default(false)
  minimumOrderAmount Int? // Optional: minimum order amount for free shipping (in cents)
}

// Tax Rates
model TaxRate {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String // e.g., "Sales Tax", "VAT"
  percentage Float
  country    String?
  state      String? // or province
  zip        String? // or postal code
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum CouponType {
  percentage
  fixed
}

// Coupon Codes
model CouponCode {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  code           String    @unique
  discountType   String    @default("percentage") // "percentage" or "fixed"
  amount         Int // Amount of the discount (percentage or fixed amount in cents)
  startDate      DateTime?
  endDate        DateTime?
  maxUses        Int? // Optional: limit the number of times a coupon can be used
  minOrderAmount Int? // Optional: minimum order amount to apply the coupon (in cents)
  isActive       Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  Info
  Warning
  Error
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  sender    String?
  read      Boolean
  type      NotificationType @default(Info)
  createdAt DateTime         @default(now())
}


model Testimonial {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    UserImage String
    userName String
    designation String?
    message    String
    createdAt  DateTime @default(now())
}